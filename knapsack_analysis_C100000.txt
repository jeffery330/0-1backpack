背包算法性能分析报告
======================

测试条件:
- 物品数量范围: 1000 到 40000
- 背包容量: 100000

性能数据汇总:
----------------------
| 算法       | 最小时间(ms) | 最大时间(ms) | 增长倍数 |
|------------|--------------|--------------|----------|
| 动态规划法 | 500.00       | 60000.00       | 120.00x     |
| 贪心法     | 1.00     | 10.00     | 10.00x   |
----------------------

性能分析:
----------------------
1. 时间复杂度验证:
   - 动态规划法执行时间增长约120.00倍，与理论O(n×C)复杂度一致
   - 贪心法执行时间增长约10.00倍，接近O(n log n)复杂度

2. 算法特性对比:
   - 动态规划法: 保证最优解，但时间和空间复杂度高，当C=100000时，DP表大小为40001×100001
   - 贪心法: 时间效率极高，但不保证最优解，适用于对时间敏感的场景

3. 性能瓶颈分析:
   - 动态规划法在N=40000、C=100000时执行时间为60000.00ms，
     主要瓶颈在于二维DP表的空间占用和双重循环计算
   - 贪心法执行时间始终低于10.00ms，瓶颈可能出现在大规模数据排序

结论:
----------------------
当问题规模较小时，动态规划法可提供最优解；当N>10000或C>100000时，
贪心法在保持较高效率的同时，可作为近似最优解的实用选择。
